@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorWebApplication2.Shared
@using MassTransit
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>App2</PageTitle>

<div class="form-group">
    <label>
        Message:
        <input @bind="newMessageText" size="50" />
    </label>
    <button @onclick="Send" disabled="@(!IsConnected)">Send message</button>
</div>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li><small>@message.Id</small> - @message.Text</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<Message> messages = new List<Message>();
    private string? newMessageText;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/messages-hub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, string>(
            "ReceiveMessage",
            (id, text) =>
            {
                var encodedMsg = new Message
                {
                    Id = Guid.Parse(id),
                    Text = text,
                };

                messages.Add(encodedMsg);
                StateHasChanged();
            });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is null)
        {
            return;
        }

        if(string.IsNullOrEmpty(newMessageText))
        {
            return; 
        }

        if (IsConnected)
        {
            var messageId = NewId.NextSequentialGuid();

            await hubConnection.SendAsync(
                                    "SendMessage",
                                    messageId,
                                    newMessageText);

            newMessageText = string.Empty;
        }
    }

    private bool IsConnected =>
                    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}